guid: 4a9d8973-6dba-0042-b3aa-07924877ebd5
name: AzureVirtualMachines
title: Configure monitoring for all Azure Virtual Machines
description: |-
  Azure Monitor Metrics automatically receives platform metrics, but platform logs, which offer detailed diagnostics and auditing for resources and their Azure platform, need to be manually routed for collection.
source:
  type: aprl
  file: azure-resources/Compute/virtualMachines/recommendations.yaml
  timestamp: July 24, 2024
services:
- Microsoft.Compute/virtualMachines
resourceTypes:
- Microsoft.Compute/virtualMachines
severity: 2
labels:
  area: Monitoring and Alerting
links: []
queries:
  arg: |
    // Azure Resource Graph Query
    // Find all Virtual Machines without diagnostic settings enabled/with diagnostic settings enabled but not configured both performance counters and event logs/syslogs.
    resources
    | where type =~ "microsoft.compute/virtualmachines"
    | project name, id, tags, lowerCaseVmId = tolower(id)
    | join kind = leftouter (
        resources
        | where type =~ "Microsoft.Compute/virtualMachines/extensions" and properties.publisher =~ "Microsoft.Azure.Diagnostics"
        | project
            lowerCaseVmIdOfExtension = tolower(substring(id, 0, indexof(id, "/extensions/"))),
            extensionType = properties.type,
            provisioningState = properties.provisioningState,
            storageAccount = properties.settings.StorageAccount,
            // Windows
            wadPerfCounters = properties.settings.WadCfg.DiagnosticMonitorConfiguration.PerformanceCounters.PerformanceCounterConfiguration,
            wadEventLogs = properties.settings.WadCfg.DiagnosticMonitorConfiguration.WindowsEventLog,
            // Linux
            ladPerfCounters = properties.settings.ladCfg.diagnosticMonitorConfiguration.performanceCounters.performanceCounterConfiguration,
            ladSyslog = properties.settings.ladCfg.diagnosticMonitorConfiguration.syslogEvents
        | extend
            // Windows
            isWadPerfCountersConfigured = iif(array_length(wadPerfCounters) > 0, true, false),
            isWadEventLogsConfigured = iif(isnotnull(wadEventLogs) and array_length(wadEventLogs.DataSource) > 0, true, false),
            // Linux
            isLadPerfCountersConfigured = iif(array_length(ladPerfCounters) > 0, true, false),
            isLadSyslogConfigured = isnotnull(ladSyslog)
        | project
            lowerCaseVmIdOfExtension,
            extensionType,
            provisioningState,
            storageAccount,
            isPerfCountersConfigured = case(extensionType =~ "IaaSDiagnostics", isWadPerfCountersConfigured, extensionType =~ "LinuxDiagnostic", isLadPerfCountersConfigured, false),
            isEventLogsConfigured = case(extensionType =~ "IaaSDiagnostics", isWadEventLogsConfigured, extensionType =~ "LinuxDiagnostic", isLadSyslogConfigured, false)
        )
        on $left.lowerCaseVmId == $right.lowerCaseVmIdOfExtension
    | where isempty(lowerCaseVmIdOfExtension) or provisioningState !~ "Succeeded" or not(isPerfCountersConfigured and isEventLogsConfigured)
    | extend
        param1 = strcat("DiagnosticSetting: ", iif(isnotnull(extensionType), strcat("Enabled, partially configured (", extensionType, ")"), "Not enabled")),
        param2 = strcat("ProvisioningState: ", iif(isnotnull(provisioningState), provisioningState, "n/a")),
        param3 = strcat("storageAccount: ", iif(isnotnull(storageAccount), storageAccount, "n/a")),
        param4 = strcat("PerformanceCounters: ", case(isnull(isPerfCountersConfigured), "n/a", isPerfCountersConfigured, "Configured", "Not configured")),
        param5 = strcat("EventLogs/Syslogs: ", case(isnull(isEventLogsConfigured), "n/a", isEventLogsConfigured, "Configured", "Not configured"))
    | project recommendationId = "4a9d8973-6dba-0042-b3aa-07924877ebd5", name, id, tags, param1, param2, param3, param4, param5
