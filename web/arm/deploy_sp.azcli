##################################################################
# 1. Retrieve SP credentials from Azure Key Vault, or create one #
##################################################################

# Variables
keyvault_name=erjositoKeyvault
keyvault_rg=keyvaults   # Only required if new AKV is to be created
keyvault_loc=westeurope # Only required if new AKV is to be created
purpose=checklists

# Day zero: create Azure Key Vault if required
echo "Verifying if AKV ${keyvault_name} exists..."
keyvault_rg_found=$(az keyvault list -o tsv --query "[?name=='$keyvault_name'].resourceGroup")
if [[ -n ${keyvault_rg_found} ]]
then
    echo "AKV ${keyvault_name} found in resource group $keyvault_rg_found"
    keyvault_rg="$keyvault_rg_found"
else
    echo "Creating AKV ${keyvault_name} in RG ${keyvault_rg}..."
    az group create -n $keyvault_rg -l $keyvault_loc -o none
    az keyvault create -n $keyvault_name -g $keyvault_rg -l $keyvault_loc -o none
    user_name=$(az account show --query 'user.name' -o tsv)
    echo "Setting policies for user ${user_name}..."
    az keyvault set-policy -n $keyvault_name -g $keyvault_rg --upn $user_name -o none \
        --certificate-permissions backup create delete deleteissuers get getissuers import list listissuers managecontacts manageissuers purge recover restore setissuers update \
        --key-permissions backup create decrypt delete encrypt get import list purge recover restore sign unwrapKey update verify wrapKey \
        --secret-permissions backup delete get list purge recover restore set \
        --storage-permissions backup delete deletesas get getsas list listsas purge recover regeneratekey restore set setsas update
fi

# Try to get SP details from AKV
echo "Trying to get secrets from AKV ${keyvault_name}..."
keyvault_appid_secret_name=$purpose-sp-appid
keyvault_password_secret_name=$purpose-sp-secret
sp_app_id=$(az keyvault secret show --vault-name $keyvault_name -n $keyvault_appid_secret_name --query 'value' -o tsv)
sp_app_secret=$(az keyvault secret show --vault-name $keyvault_name -n $keyvault_password_secret_name --query 'value' -o tsv)

# If either variable is blank, create new SP with the required name
if [[ -z "$sp_app_id" ]] || [[ -z "$sp_app_secret" ]]
then
    # Create new SP
    echo "Service Principal secrets for ${purpose} not found, creating new Service Principal..."
    sp_name=$purpose
    sp_output=$(az ad sp create-for-rbac --name $sp_name --skip-assignment 2>/dev/null)
    sp_app_id=$(echo $sp_output | jq -r '.appId')
    sp_app_secret=$(echo $sp_output | jq -r '.password')
    az keyvault secret set --vault-name $keyvault_name --name $keyvault_appid_secret_name --value $sp_app_id -o none
    az keyvault secret set --vault-name $keyvault_name --name $keyvault_password_secret_name --value $sp_app_secret -o none
    # Optionally, assign  Azure RBAC roles (example a RG) or AKV policy (example certificate/secret get if the SP should be able to retrieve certs)
    echo "Adding Reader role to new Service Principal..."
    subscription_id=$(az account show --query id -o tsv)
    scope="/subscriptions/${subscription_id}"
    az role assignment create --scope $scope --assignee $sp_app_id --role 'Reader' -o none
fi

# Verify whether SP has expired, and if so, renew it
sp_end_date=$(az ad app show --id $sp_app_id --query 'passwordCredentials[0].endDate' -o tsv)
sp_end_date=$(date --date="$sp_end_date" +%s)
now=$(date +%s)
if [[ $sp_end_date < $now ]]
then
    echo "SP expired, extending one year"
    new_password=$(az ad app credential reset --id $sp_app_id --years 1 --query password -o tsv)
    az keyvault secret set --vault-name $keyvault_name --name $keyvault_password_secret_name --value $new_password -o none
    sp_app_secret=$new_password
else
    echo "SP not expired, not required to renew"
fi

# Optional: test the SP credentials
# tenant_id=$(az account show --query tenantId -o tsv)
# az login --service-principal -u $sp_app_id -p $sp_app_secret --tenant $tenant_id

####################################################
# 2. Create RG and deploy checklist infrastructure #
####################################################

suffix=$RANDOM
rg="checklist${suffix}"
location=westeurope
aci_name="checklistaci${suffix}"
mysql_server_name="mysql${suffix}"
mysql_server_user=$(whoami)
mysql_server_password=$(echo $(tr -dc a-zA-Z0-9 </dev/urandom 2>/dev/null| head -c 12))
echo "Creating resource group ${rg} in ${location}..."
az group create -n $rg -l $location -o none
echo "Deploying template to resource group ${rg}..."
tenant_id=$(az account show --query tenantId -o tsv)
az deployment group create -n checklist$RANDOM -g $rg --template-file ./template.json --parameters \
    "checklistTech=aks" \
    "tenantId=${tenant_id}" \
    "clientId=${sp_app_id}" \
    "clientSecret=${sp_app_secret}" \
    "aciName=${aci_name}" \
    "serverName=${mysql_server_name}" \
    "administratorLogin=${mysql_server_user}" \
    "administratorLoginPassword=${mysql_server_password}"

# Cleanup
# az group delete $rg -y --no-wait